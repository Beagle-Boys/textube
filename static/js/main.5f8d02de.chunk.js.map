{"version":3,"sources":["components/Loading/Loading.module.css","components/Loading/Loading.tsx","App.tsx","serviceWorkerRegistration.ts","reportWebVitals.ts","index.tsx","App.module.css"],"names":["module","exports","Loading","className","styles","page","circle","Home","React","lazy","Error","classNames","appear","appearActive","appearDone","enter","enterActive","enterDone","exit","exitActive","exitDone","App","exact","path","match","CSSTransition","in","timeout","unmountOnExit","Suspense","fallback","isLocalhost","Boolean","window","location","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","basename","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"sFACAA,EAAOC,QAAU,CAAC,KAAO,sBAAsB,OAAS,wBAAwB,KAAO,wB,mICYxEC,MAVf,WACI,OACI,mCACI,qBAAKC,UAAWC,IAAOC,KAAvB,SACI,qBAAKF,UAAWC,IAAOE,cCAjCC,EAAOC,IAAMC,MAAK,kBAAM,gCACxBC,EAAQF,IAAMC,MAAK,kBAAM,gCAEzBE,EAAa,CACjBC,OAAQR,IAAOQ,OACfC,aAAcT,IAAOS,aACrBC,WAAYV,IAAOU,WACnBC,MAAOX,IAAOW,MACdC,YAAaZ,IAAOY,YACpBC,UAAWb,IAAOa,UAClBC,KAAMd,IAAOc,KACbC,WAAYf,IAAOe,WACnBC,SAAUhB,IAAOgB,UA0CJC,MAvCf,WACE,OACE,qCACE,cAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAlB,SACG,gBAAGC,EAAH,EAAGA,MAAH,OACC,cAACC,EAAA,EAAD,CACEC,GAAa,MAATF,EACJG,QAAS,IACThB,WAAYA,EACZiB,eAAa,EAJf,SAME,qBAAKzB,UAAWC,IAAOC,KAAvB,SACE,cAAC,IAAMwB,SAAP,CAAgBC,SAAU5B,EAA1B,SACE,cAACK,EAAD,aAMV,cAAC,IAAD,CAAOgB,KAAK,QAAZ,SACG,gBAAGC,EAAH,EAAGA,MAAH,OACC,cAACC,EAAA,EAAD,CACEC,GAAa,MAATF,EACJG,QAAS,IACTC,eAAa,EACbjB,WAAYA,EAJd,SAME,qBAAKR,UAAWC,IAAOC,KAAvB,SACE,cAAC,IAAMwB,SAAP,CAAgBC,SAAU5B,EAA1B,SACE,cAACQ,EAAD,iBCvCVqB,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASX,MAAM,2DA0CnC,SAASY,EAAgBC,EAAeC,GACtCC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAACC,GACLA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,YAI1BC,QAAQC,IACN,+GAKEb,GAAUA,EAAOc,UACnBd,EAAOc,SAAST,KAMlBO,QAAQC,IAAI,sCAGRb,GAAUA,EAAOe,WACnBf,EAAOe,UAAUV,WAO5BW,OAAM,SAACC,GACNL,QAAQK,MAAM,4CAA6CA,MCjGjE,IAYeC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBhB,MAAK,YAAkD,IAA/CiB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,QCCdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAeC,SAAS,WAAxB,SACE,cAAC,EAAD,QAGJC,SAASC,eAAe,SFSnB,SAAkB/B,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAI+B,IAAIC,wCAAwBtC,OAAOC,SAASsC,MACpDC,SAAWxC,OAAOC,SAASuC,OAIvC,OAGFxC,OAAOyC,iBAAiB,QAAQ,WAC9B,IAAMrC,EAAK,UAAMkC,wCAAN,sBAEPxC,IAgEV,SAAiCM,EAAeC,GAE9CqC,MAAMtC,EAAO,CACXuC,QAAS,CAAE,iBAAkB,YAE5BlC,MAAK,SAACmC,GAEL,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5C1C,UAAUC,cAAc0C,MAAMxC,MAAK,SAACC,GAClCA,EAAawC,aAAazC,MAAK,WAC7BT,OAAOC,SAASkD,eAKpBhD,EAAgBC,EAAOC,MAG1BgB,OAAM,WACLJ,QAAQC,IAAI,oEAtFVkC,CAAwBhD,EAAOC,GAI/BC,UAAUC,cAAc0C,MAAMxC,MAAK,WACjCQ,QAAQC,IACN,+GAMJf,EAAgBC,EAAOC,OE/B/BgD,GAKA9B,K,kBC1BAxD,EAAOC,QAAU,CAAC,OAAS,oBAAoB,aAAe,0BAA0B,WAAa,wBAAwB,MAAQ,mBAAmB,YAAc,yBAAyB,UAAY,uBAAuB,KAAO,kBAAkB,WAAa,wBAAwB,SAAW,sBAAsB,KAAO,qB","file":"static/js/main.5f8d02de.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"page\":\"Loading_page__1irBO\",\"circle\":\"Loading_circle__2oxVm\",\"drop\":\"Loading_drop__2swo2\"};","import React from \"react\";\nimport styles from \"./Loading.module.css\";\n\nfunction Loading() {\n    return (\n        <>\n            <div className={styles.page}>\n                <div className={styles.circle} />\n            </div>\n        </>\n    );\n};\n\nexport default Loading;","import React from 'react';\nimport { Route } from 'react-router-dom';\nimport { CSSTransition } from 'react-transition-group';\n\nimport styles from \"./App.module.css\";\nimport Loading from './components/Loading/Loading';\n\nconst Home = React.lazy(() => import(\"./pages/Home/Home\"));\nconst Error = React.lazy(() => import(\"./pages/Error/Error\"));\n\nconst classNames = {\n  appear: styles.appear,\n  appearActive: styles.appearActive,\n  appearDone: styles.appearDone,\n  enter: styles.enter,\n  enterActive: styles.enterActive,\n  enterDone: styles.enterDone,\n  exit: styles.exit,\n  exitActive: styles.exitActive,\n  exitDone: styles.exitDone,\n};\n\nfunction App() {\n  return (\n    <>\n      <Route exact path=\"/\">\n        {({ match }) => (\n          <CSSTransition\n            in={match != null}\n            timeout={300}\n            classNames={classNames}\n            unmountOnExit\n          >\n            <div className={styles.page}>\n              <React.Suspense fallback={Loading}>\n                <Home />\n              </React.Suspense>\n            </div>\n          </CSSTransition>\n        )}\n      </Route>\n      <Route path=\"/some\">\n        {({ match }) => (\n          <CSSTransition\n            in={match != null}\n            timeout={300}\n            unmountOnExit\n            classNames={classNames}\n          >\n            <div className={styles.page}>\n              <React.Suspense fallback={Loading}>\n                <Error />\n              </React.Suspense>\n            </div>\n          </CSSTransition>\n        )}\n      </Route>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\nimport { BrowserRouter } from 'react-router-dom';\n//import ReactGA from 'react-ga';\n\n//ReactGA.initialize('UA-117738764-3');\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter basename=\"/textube\">\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();","// extracted by mini-css-extract-plugin\nmodule.exports = {\"appear\":\"App_appear__3r9lb\",\"appearActive\":\"App_appearActive__1uccQ\",\"appearDone\":\"App_appearDone__1Xrxx\",\"enter\":\"App_enter__2d_oE\",\"enterActive\":\"App_enterActive__3Z_zS\",\"enterDone\":\"App_enterDone__1eej7\",\"exit\":\"App_exit__qu2sb\",\"exitActive\":\"App_exitActive__3R2-x\",\"exitDone\":\"App_exitDone__2Znk-\",\"page\":\"App_page__CKP-2\"};"],"sourceRoot":""}